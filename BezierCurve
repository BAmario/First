#include <iostream>
#include <windows.h>
#include "gl\glut.h"

using namespace std;
GLfloat ctrlpoints[4][3];

void init(void) {
	cout << "Enter the x,y, coordinates for 4 points:" << endl;
	for(int i=0;i<4;i++){
		cout << "Enter for the coordinates "<<i+1<<" point:" << endl;
		for(int j=0;j<2;j++){
			cin >> ctrlpoints[i][j];
		}
	}
	glClearColor(0.0, 0.0, 0.0, 0.0);
	glShadeModel (GL_FLAT);
	glMap1f(GL_MAP1_VERTEX_3, 0.0, 1.0, 3, 4, &ctrlpoints[0][0]);
	glEnable (GL_MAP1_VERTEX_3);
}
void display(void) {
	glClear (GL_COLOR_BUFFER_BIT);
	glBegin (GL_LINE_STRIP);
	for (int i = 0; i <= 30; i++)
		glEvalCoord1f((GLfloat) i / 30.0);
	glEnd();
	glPointSize(5.0);
	glColor3f(1.0, 1.0, 0.0);
	glBegin (GL_POINTS);
	for (int i = 0; i < 4; i++)
		glVertex3fv(&ctrlpoints[i][0]);
	glEnd();
	glFlush();
}
void reshape(int w, int h) {
	glViewport(0, 0, (GLsizei) w, (GLsizei) h);
	glMatrixMode (GL_PROJECTION);
	glLoadIdentity();
	if (w <= h)
		glOrtho(-5.0, 5.0, -5.0 * (GLfloat) h / (GLfloat) w,
				5.0 * (GLfloat) h / (GLfloat) w, -5.0, 5.0);
	else
		glOrtho(-5.0 * (GLfloat) w / (GLfloat) h,
				5.0 * (GLfloat) w / (GLfloat) h, -5.0, 5.0, -5.0, 5.0);
	glMatrixMode (GL_MODELVIEW);
	glLoadIdentity();
}
int main(int argc, char** argv) {
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
	glutInitWindowSize(1000, 600);
	glutInitWindowPosition(100, 100);
	glutCreateWindow("Bassel's Bezier Curve");
	init();
	glutDisplayFunc (display);
	glutReshapeFunc(reshape);
	glutMainLoop();
	return 0;
}
